{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "useEffect",
    "useImperativeHandle",
    "useMemo",
    "useRef",
    "useState",
    "processHtml",
    "htmlEncode",
    "shortcuts",
    "styles",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "padding",
    "minHeight",
    "placeholder",
    "language",
    "className",
    "style",
    "onChange",
    "other",
    "value",
    "setValue",
    "textRef",
    "current",
    "contentStyle",
    "paddingTop",
    "paddingRight",
    "paddingBottom",
    "paddingLeft",
    "htmlStr",
    "String",
    "preView",
    "editor",
    "__html",
    "container",
    "evn",
    "onKeyDown",
    "textarea",
    "WebkitTextFillColor",
    "target"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { processHtml, htmlEncode } from './utils';\nimport shortcuts from './shortcuts';\nimport * as styles from './styles';\nimport './style/index.less';\n\nexport * from './SelectionText';\n\nexport interface TextareaCodeEditorProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  prefixCls?: string;\n  /**\n   * Set what programming language the code belongs to.\n   */\n  language?: string;\n  /**\n   * Optional padding for code. Default: `10`.\n   */\n  padding?: number;\n  /**\n   * The minimum height of the editor. Default: `16`.\n   */\n  minHeight?: number;\n}\n\nexport default React.forwardRef<HTMLTextAreaElement, TextareaCodeEditorProps>((props, ref) => {\n  const {\n    prefixCls = 'w-tc-editor',\n    value: _,\n    padding = 10,\n    minHeight = 16,\n    placeholder,\n    language,\n    className,\n    style,\n    onChange,\n    ...other\n  } = props;\n\n  const [value, setValue] = useState(props.value || '');\n  useEffect(() => setValue(props.value || ''), [props.value]);\n  const textRef = useRef<HTMLTextAreaElement>(null);\n  useImperativeHandle<HTMLTextAreaElement, HTMLTextAreaElement>(ref, () => textRef.current!);\n\n  const contentStyle = {\n    paddingTop: padding,\n    paddingRight: padding,\n    paddingBottom: padding,\n    paddingLeft: padding,\n  };\n\n  const htmlStr = useMemo(\n    () =>\n      processHtml(\n        `<pre aria-hidden=true><code ${language ? `class=\"language-${language}\"` : ''} >${htmlEncode(\n          String(value || ''),\n        )}</code><br /></pre>`,\n      ),\n    [value, language],\n  );\n  const preView = useMemo(\n    () => (\n      <div\n        style={{ ...styles.editor, ...contentStyle, minHeight }}\n        className={`${prefixCls}-preview ${language ? `language-${language}` : ''}`}\n        dangerouslySetInnerHTML={{\n          __html: htmlStr,\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [prefixCls, language, htmlStr],\n  );\n\n  return (\n    <div style={{ ...styles.container, ...style }} className={`${prefixCls} ${className || ''}`}>\n      <textarea\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        autoCapitalize=\"off\"\n        {...other}\n        placeholder={placeholder}\n        onKeyDown={(evn) => {\n          shortcuts(evn);\n          other.onKeyDown && other.onKeyDown(evn);\n        }}\n        style={{\n          ...styles.editor,\n          ...styles.textarea,\n          ...contentStyle,\n          minHeight,\n          ...(placeholder && !value ? { WebkitTextFillColor: 'inherit' } : {}),\n        }}\n        ref={textRef}\n        onChange={(evn) => {\n          setValue(evn.target.value);\n          onChange && onChange(evn);\n        }}\n        className={`${prefixCls}-text`}\n        value={value}\n      />\n      {preView}\n    </div>\n  );\n});\n"
  ]
}